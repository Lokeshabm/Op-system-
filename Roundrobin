#include <stdio.h>
#define MAX 10
struct Process {
    int pid;       
    int bt;
    int art;      
    int wt;        
    int tat;       
    int rem_bt;    
    int completed; 
};
void findWaitingTime(struct Process proc[], int n, int quantum)
{
    int time = 0;
    int remaining_processes = n;
        for (int i = 0; i < n; i++)
        {
        proc[i].rem_bt = proc[i].bt;
        proc[i].completed = 0;
    }
    while (remaining_processes > 0)
    {
        for (int i = 0; i < n; i++)
        {
            // If the process has arrived and is not completed yet
            if (proc[i].art <= time && proc[i].rem_bt > 0 && proc[i].completed == 0) 
            {
                if (proc[i].rem_bt > quantum)
                {
                    // Execute for one quantum time
                    time += quantum;
                    proc[i].rem_bt -= quantum;
                }
              else
                {
                    time += proc[i].rem_bt;
                    proc[i].wt = time - proc[i].bt - proc[i].art;
                    proc[i].tat = proc[i].wt + proc[i].bt;
                    proc[i].rem_bt = 0;
                    proc[i].completed = 1;  
                    remaining_processes--;
                }
            }
        }
    }
}
void calculateAverageTimes(struct Process proc[], int n)
{
    int total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += proc[i].wt;
        total_tat += proc[i].tat;
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
}
int main()
{
    int n, quantum;
    struct Process proc[MAX];
    printf("Enter number of processes: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        printf("Enter Burst Time and Arrival Time for Process %d: ", i + 1);
        scanf("%d %d", &proc[i].bt, &proc[i].art);
        proc[i].pid = i + 1;
    }
    printf("Enter Time Quantum: ");
    scanf("%d", &quantum);
    findWaitingTime(proc, n, quantum);
    printf("\nProcess ID | Arrival Time | Burst Time | Waiting Time | Turnaround Time\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].art, proc[i].bt, proc[i].wt, proc[i].tat);
    }
    calculateAverageTimes(proc, n);
    return 0;
}
